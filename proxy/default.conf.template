upstream backend {
	server backend:9876 max_fails=3 fail_timeout=5s;
}

upstream flower {
	server flower:5555 max_fails=3 fail_timeout=5s;
}

server {
	listen 443 ssl;
	
	server_name  		${BASEDOMAIN}, ${CROSSORIGINDOMAIN};
	ssl_certificate	 	/etc/letsencrypt/live/${BASEDOMAIN}/fullchain.pem;
	ssl_certificate_key	/etc/letsencrypt/live/${BASEDOMAIN}/privkey.pem;
	ssl_protocols		TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers			HIGH:!aNULL:!MD5;
	
		
	client_max_body_size 10000M;
	client_body_buffer_size 10000M;
	
	satisfy any;
	allow 10.173.0.0/16; # Docker-Network
	allow 10.173.0.7;
	auth_basic "Authorization required";
	auth_basic_user_file /etc/nginx/conf.d/.htpasswd;


	location / {
		proxy_pass http://backend;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_redirect off;
		proxy_buffering off;  # we dont want to write to disk
		proxy_pass_header Content-Type;
		proxy_read_timeout 300;
		proxy_connect_timeout 300;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Url-Scheme $scheme;
		proxy_pass_header Authorization;
	}
}

server {
	listen 443 ssl;
	
	server_name  		flower.${BASEDOMAIN};
	ssl_certificate	 	/etc/letsencrypt/live/${BASEDOMAIN}/fullchain.pem;
	ssl_certificate_key	/etc/letsencrypt/live/${BASEDOMAIN}/privkey.pem;
	ssl_protocols		TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers			HIGH:!aNULL:!MD5;
	
	client_max_body_size 1000M;
	client_body_buffer_size 1000M;

	   
	satisfy any;
	allow 10.173.0.0/16; # Docker-Network
	allow 10.173.0.7;
	auth_basic "Authorization required";
	auth_basic_user_file /etc/nginx/conf.d/.htpasswd;


	location / {
		proxy_pass http://flower;
		proxy_set_header Host $host;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

}


server {
	listen 80;
	server_name ${BASEDOMAIN}, ${CROSSORIGINDOMAIN};
	return 301 https://\$host\$request_uri;
}